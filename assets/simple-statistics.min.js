!(function(t, r) {
  "object" == typeof exports && "undefined" != typeof module
    ? r(exports)
    : "function" == typeof define && define.amd
    ? define(["exports"], r)
    : r((t.ss = {}));
})(this, function(t) {
  function r(t) {
    if (0 === t.length) return 0;
    for (var r, n = t[0], e = 0, a = 1; a < t.length; a++)
      (r = n + t[a]),
        Math.abs(n) >= Math.abs(t[a])
          ? (e += n - r + t[a])
          : (e += t[a] - r + n),
        (n = r);
    return n + e;
  }
  function n(t) {
    if (0 === t.length)
      throw new Error("mean requires at least one data point");
    return r(t) / t.length;
  }
  function e(t, r) {
    var e,
      a,
      o = n(t),
      i = 0;
    if (2 === r) for (a = 0; a < t.length; a++) i += (e = t[a] - o) * e;
    else for (a = 0; a < t.length; a++) i += Math.pow(t[a] - o, r);
    return i;
  }
  function a(t) {
    if (0 === t.length)
      throw new Error("variance requires at least one data point");
    return e(t, 2) / t.length;
  }
  function o(t) {
    if (1 === t.length) return 0;
    var r = a(t);
    return Math.sqrt(r);
  }
  function i(t) {
    if (0 === t.length)
      throw new Error("mode requires at least one data point");
    if (1 === t.length) return t[0];
    for (var r = t[0], n = NaN, e = 0, a = 1, o = 1; o < t.length + 1; o++)
      t[o] !== r ? (a > e && ((e = a), (n = r)), (a = 1), (r = t[o])) : a++;
    return n;
  }
  function u(t) {
    return t.slice().sort(function(t, r) {
      return t - r;
    });
  }
  function h(t) {
    if (0 === t.length) throw new Error("min requires at least one data point");
    for (var r = t[0], n = 1; n < t.length; n++) t[n] < r && (r = t[n]);
    return r;
  }
  function f(t) {
    if (0 === t.length) throw new Error("max requires at least one data point");
    for (var r = t[0], n = 1; n < t.length; n++) t[n] > r && (r = t[n]);
    return r;
  }
  function s(t, r) {
    var n = t.length * r;
    if (0 === t.length)
      throw new Error("quantile requires at least one data point.");
    if (r < 0 || r > 1) throw new Error("quantiles must be between 0 and 1");
    return 1 === r
      ? t[t.length - 1]
      : 0 === r
      ? t[0]
      : n % 1 != 0
      ? t[Math.ceil(n) - 1]
      : t.length % 2 == 0
      ? (t[n - 1] + t[n]) / 2
      : t[n];
  }
  function l(t, r, n, e) {
    for (n = n || 0, e = e || t.length - 1; e > n; ) {
      if (e - n > 600) {
        var a = e - n + 1,
          o = r - n + 1,
          i = Math.log(a),
          u = 0.5 * Math.exp((2 * i) / 3),
          h = 0.5 * Math.sqrt((i * u * (a - u)) / a);
        o - a / 2 < 0 && (h *= -1),
          l(
            t,
            r,
            Math.max(n, Math.floor(r - (o * u) / a + h)),
            Math.min(e, Math.floor(r + ((a - o) * u) / a + h))
          );
      }
      var f = t[r],
        s = n,
        g = e;
      for (c(t, n, r), t[e] > f && c(t, n, e); s < g; ) {
        for (c(t, s, g), s++, g--; t[s] < f; ) s++;
        for (; t[g] > f; ) g--;
      }
      t[n] === f ? c(t, n, g) : c(t, ++g, e),
        g <= r && (n = g + 1),
        r <= g && (e = g - 1);
    }
  }
  function c(t, r, n) {
    var e = t[r];
    (t[r] = t[n]), (t[n] = e);
  }
  function g(t, r) {
    var n = t.slice();
    if (Array.isArray(r)) {
      !(function(t, r) {
        for (var n = [0], e = 0; e < r.length; e++) n.push(w(t.length, r[e]));
        n.push(t.length - 1), n.sort(p);
        var a = [0, n.length - 1];
        for (; a.length; ) {
          var o = Math.ceil(a.pop()),
            i = Math.floor(a.pop());
          if (!(o - i <= 1)) {
            var u = Math.floor((i + o) / 2);
            v(t, n[u], Math.floor(n[i]), Math.ceil(n[o])), a.push(i, u, u, o);
          }
        }
      })(n, r);
      for (var e = [], a = 0; a < r.length; a++) e[a] = s(n, r[a]);
      return e;
    }
    return v(n, w(n.length, r), 0, n.length - 1), s(n, r);
  }
  function v(t, r, n, e) {
    r % 1 == 0
      ? l(t, r, n, e)
      : (l(t, (r = Math.floor(r)), n, e), l(t, r + 1, r + 1, e));
  }
  function p(t, r) {
    return t - r;
  }
  function w(t, r) {
    var n = t * r;
    return 1 === r
      ? t - 1
      : 0 === r
      ? 0
      : n % 1 != 0
      ? Math.ceil(n) - 1
      : t % 2 == 0
      ? n - 0.5
      : n;
  }
  function M(t, r) {
    if (r < t[0]) return 0;
    if (r > t[t.length - 1]) return 1;
    var n = (function(t, r) {
      var n = 0,
        e = 0,
        a = t.length;
      for (; e < a; ) r <= t[(n = (e + a) >>> 1)] ? (a = n) : (e = -~n);
      return e;
    })(t, r);
    if (t[n] !== r) return n / t.length;
    n++;
    var e = (function(t, r) {
      var n = 0,
        e = 0,
        a = t.length;
      for (; e < a; ) r >= t[(n = (e + a) >>> 1)] ? (e = -~n) : (a = n);
      return e;
    })(t, r);
    if (e === n) return n / t.length;
    var a = e - n + 1;
    return (a * (e + n)) / 2 / a / t.length;
  }
  function m(t) {
    var r = g(t, 0.75),
      n = g(t, 0.25);
    if ("number" == typeof r && "number" == typeof n) return r - n;
  }
  function d(t) {
    return +g(t, 0.5);
  }
  function b(t) {
    for (var r = d(t), n = [], e = 0; e < t.length; e++)
      n.push(Math.abs(t[e] - r));
    return d(n);
  }
  function q(t, r) {
    r = r || Math.random;
    for (var n, e, a = t.length; a > 0; )
      (e = Math.floor(r() * a--)), (n = t[a]), (t[a] = t[e]), (t[e] = n);
    return t;
  }
  function E(t, r) {
    return q(t.slice().slice(), r);
  }
  function y(t) {
    for (var r, n = 0, e = 0; e < t.length; e++)
      (0 !== e && t[e] === r) || ((r = t[e]), n++);
    return n;
  }
  function S(t, r) {
    for (var n = [], e = 0; e < t; e++) {
      for (var a = [], o = 0; o < r; o++) a.push(0);
      n.push(a);
    }
    return n;
  }
  function x(t, r, n, e) {
    var a;
    if (t > 0) {
      var o = (n[r] - n[t - 1]) / (r - t + 1);
      a = e[r] - e[t - 1] - (r - t + 1) * o * o;
    } else a = e[r] - (n[r] * n[r]) / (r + 1);
    return a < 0 ? 0 : a;
  }
  function k(t, r, n, e, a, o, i) {
    if (!(t > r)) {
      var u = Math.floor((t + r) / 2);
      (e[n][u] = e[n - 1][u - 1]), (a[n][u] = u);
      var h = n;
      t > n && (h = Math.max(h, a[n][t - 1] || 0)),
        (h = Math.max(h, a[n - 1][u] || 0));
      var f,
        s,
        l,
        c = u - 1;
      r < e.length - 1 && (c = Math.min(c, a[n][r + 1] || 0));
      for (
        var g = c;
        g >= h && !((f = x(g, u, o, i)) + e[n - 1][h - 1] >= e[n][u]);
        --g
      )
        (s = x(h, u, o, i) + e[n - 1][h - 1]) < e[n][u] &&
          ((e[n][u] = s), (a[n][u] = h)),
          h++,
          (l = f + e[n - 1][g - 1]) < e[n][u] && ((e[n][u] = l), (a[n][u] = g));
      k(t, u - 1, n, e, a, o, i), k(u + 1, r, n, e, a, o, i);
    }
  }
  function I(t, r) {
    if (t.length !== r.length)
      throw new Error("sampleCovariance requires samples with equal lengths");
    if (t.length < 2)
      throw new Error(
        "sampleCovariance requires at least two data points in each sample"
      );
    for (var e = n(t), a = n(r), o = 0, i = 0; i < t.length; i++)
      o += (t[i] - e) * (r[i] - a);
    return o / (t.length - 1);
  }
  function P(t) {
    if (t.length < 2)
      throw new Error("sampleVariance requires at least two data points");
    return e(t, 2) / (t.length - 1);
  }
  function D(t) {
    var r = P(t);
    return Math.sqrt(r);
  }
  function C(t, r, n, e) {
    return (t * r + n * e) / (r + e);
  }
  function T(t) {
    if (0 === t.length)
      throw new Error("rootMeanSquare requires at least one data point");
    for (var r = 0, n = 0; n < t.length; n++) r += Math.pow(t[n], 2);
    return Math.sqrt(r / t.length);
  }
  var N = function() {
    (this.totalCount = 0), (this.data = {});
  };
  (N.prototype.train = function(t, r) {
    for (var n in (this.data[r] || (this.data[r] = {}), t)) {
      var e = t[n];
      void 0 === this.data[r][n] && (this.data[r][n] = {}),
        void 0 === this.data[r][n][e] && (this.data[r][n][e] = 0),
        this.data[r][n][e]++;
    }
    this.totalCount++;
  }),
    (N.prototype.score = function(t) {
      var r,
        n = {};
      for (var e in t) {
        var a = t[e];
        for (r in this.data)
          (n[r] = {}),
            (n[r][e + "_" + a] = this.data[r][e]
              ? (this.data[r][e][a] || 0) / this.totalCount
              : 0);
      }
      var o = {};
      for (r in n) for (var i in ((o[r] = 0), n[r])) o[r] += n[r][i];
      return o;
    });
  var R = function() {
    (this.weights = []), (this.bias = 0);
  };
  (R.prototype.predict = function(t) {
    if (t.length !== this.weights.length) return null;
    for (var r = 0, n = 0; n < this.weights.length; n++)
      r += this.weights[n] * t[n];
    return (r += this.bias) > 0 ? 1 : 0;
  }),
    (R.prototype.train = function(t, r) {
      if (0 !== r && 1 !== r) return null;
      t.length !== this.weights.length && ((this.weights = t), (this.bias = 1));
      var n = this.predict(t);
      if ("number" == typeof n && n !== r) {
        for (var e = r - n, a = 0; a < this.weights.length; a++)
          this.weights[a] += e * t[a];
        this.bias += e;
      }
      return this;
    });
  var F = 1e-4;
  function A(t) {
    if (t < 0) throw new Error("factorial requires a non-negative value");
    if (Math.floor(t) !== t)
      throw new Error("factorial requires an integer input");
    for (var r = 1, n = 2; n <= t; n++) r *= n;
    return r;
  }
  var _ = [
      0.9999999999999971,
      57.15623566586292,
      -59.59796035547549,
      14.136097974741746,
      -0.4919138160976202,
      3399464998481189e-20,
      4652362892704858e-20,
      -9837447530487956e-20,
      0.0001580887032249125,
      -0.00021026444172410488,
      0.00021743961811521265,
      -0.0001643181065367639,
      8441822398385275e-20,
      -26190838401581408e-21,
      36899182659531625e-22
    ],
    z = 607 / 128,
    V = Math.log(Math.sqrt(2 * Math.PI));
  var B = {
    1: {
      0.995: 0,
      0.99: 0,
      0.975: 0,
      0.95: 0,
      0.9: 0.02,
      0.5: 0.45,
      0.1: 2.71,
      0.05: 3.84,
      0.025: 5.02,
      0.01: 6.63,
      0.005: 7.88
    },
    2: {
      0.995: 0.01,
      0.99: 0.02,
      0.975: 0.05,
      0.95: 0.1,
      0.9: 0.21,
      0.5: 1.39,
      0.1: 4.61,
      0.05: 5.99,
      0.025: 7.38,
      0.01: 9.21,
      0.005: 10.6
    },
    3: {
      0.995: 0.07,
      0.99: 0.11,
      0.975: 0.22,
      0.95: 0.35,
      0.9: 0.58,
      0.5: 2.37,
      0.1: 6.25,
      0.05: 7.81,
      0.025: 9.35,
      0.01: 11.34,
      0.005: 12.84
    },
    4: {
      0.995: 0.21,
      0.99: 0.3,
      0.975: 0.48,
      0.95: 0.71,
      0.9: 1.06,
      0.5: 3.36,
      0.1: 7.78,
      0.05: 9.49,
      0.025: 11.14,
      0.01: 13.28,
      0.005: 14.86
    },
    5: {
      0.995: 0.41,
      0.99: 0.55,
      0.975: 0.83,
      0.95: 1.15,
      0.9: 1.61,
      0.5: 4.35,
      0.1: 9.24,
      0.05: 11.07,
      0.025: 12.83,
      0.01: 15.09,
      0.005: 16.75
    },
    6: {
      0.995: 0.68,
      0.99: 0.87,
      0.975: 1.24,
      0.95: 1.64,
      0.9: 2.2,
      0.5: 5.35,
      0.1: 10.65,
      0.05: 12.59,
      0.025: 14.45,
      0.01: 16.81,
      0.005: 18.55
    },
    7: {
      0.995: 0.99,
      0.99: 1.25,
      0.975: 1.69,
      0.95: 2.17,
      0.9: 2.83,
      0.5: 6.35,
      0.1: 12.02,
      0.05: 14.07,
      0.025: 16.01,
      0.01: 18.48,
      0.005: 20.28
    },
    8: {
      0.995: 1.34,
      0.99: 1.65,
      0.975: 2.18,
      0.95: 2.73,
      0.9: 3.49,
      0.5: 7.34,
      0.1: 13.36,
      0.05: 15.51,
      0.025: 17.53,
      0.01: 20.09,
      0.005: 21.96
    },
    9: {
      0.995: 1.73,
      0.99: 2.09,
      0.975: 2.7,
      0.95: 3.33,
      0.9: 4.17,
      0.5: 8.34,
      0.1: 14.68,
      0.05: 16.92,
      0.025: 19.02,
      0.01: 21.67,
      0.005: 23.59
    },
    10: {
      0.995: 2.16,
      0.99: 2.56,
      0.975: 3.25,
      0.95: 3.94,
      0.9: 4.87,
      0.5: 9.34,
      0.1: 15.99,
      0.05: 18.31,
      0.025: 20.48,
      0.01: 23.21,
      0.005: 25.19
    },
    11: {
      0.995: 2.6,
      0.99: 3.05,
      0.975: 3.82,
      0.95: 4.57,
      0.9: 5.58,
      0.5: 10.34,
      0.1: 17.28,
      0.05: 19.68,
      0.025: 21.92,
      0.01: 24.72,
      0.005: 26.76
    },
    12: {
      0.995: 3.07,
      0.99: 3.57,
      0.975: 4.4,
      0.95: 5.23,
      0.9: 6.3,
      0.5: 11.34,
      0.1: 18.55,
      0.05: 21.03,
      0.025: 23.34,
      0.01: 26.22,
      0.005: 28.3
    },
    13: {
      0.995: 3.57,
      0.99: 4.11,
      0.975: 5.01,
      0.95: 5.89,
      0.9: 7.04,
      0.5: 12.34,
      0.1: 19.81,
      0.05: 22.36,
      0.025: 24.74,
      0.01: 27.69,
      0.005: 29.82
    },
    14: {
      0.995: 4.07,
      0.99: 4.66,
      0.975: 5.63,
      0.95: 6.57,
      0.9: 7.79,
      0.5: 13.34,
      0.1: 21.06,
      0.05: 23.68,
      0.025: 26.12,
      0.01: 29.14,
      0.005: 31.32
    },
    15: {
      0.995: 4.6,
      0.99: 5.23,
      0.975: 6.27,
      0.95: 7.26,
      0.9: 8.55,
      0.5: 14.34,
      0.1: 22.31,
      0.05: 25,
      0.025: 27.49,
      0.01: 30.58,
      0.005: 32.8
    },
    16: {
      0.995: 5.14,
      0.99: 5.81,
      0.975: 6.91,
      0.95: 7.96,
      0.9: 9.31,
      0.5: 15.34,
      0.1: 23.54,
      0.05: 26.3,
      0.025: 28.85,
      0.01: 32,
      0.005: 34.27
    },
    17: {
      0.995: 5.7,
      0.99: 6.41,
      0.975: 7.56,
      0.95: 8.67,
      0.9: 10.09,
      0.5: 16.34,
      0.1: 24.77,
      0.05: 27.59,
      0.025: 30.19,
      0.01: 33.41,
      0.005: 35.72
    },
    18: {
      0.995: 6.26,
      0.99: 7.01,
      0.975: 8.23,
      0.95: 9.39,
      0.9: 10.87,
      0.5: 17.34,
      0.1: 25.99,
      0.05: 28.87,
      0.025: 31.53,
      0.01: 34.81,
      0.005: 37.16
    },
    19: {
      0.995: 6.84,
      0.99: 7.63,
      0.975: 8.91,
      0.95: 10.12,
      0.9: 11.65,
      0.5: 18.34,
      0.1: 27.2,
      0.05: 30.14,
      0.025: 32.85,
      0.01: 36.19,
      0.005: 38.58
    },
    20: {
      0.995: 7.43,
      0.99: 8.26,
      0.975: 9.59,
      0.95: 10.85,
      0.9: 12.44,
      0.5: 19.34,
      0.1: 28.41,
      0.05: 31.41,
      0.025: 34.17,
      0.01: 37.57,
      0.005: 40
    },
    21: {
      0.995: 8.03,
      0.99: 8.9,
      0.975: 10.28,
      0.95: 11.59,
      0.9: 13.24,
      0.5: 20.34,
      0.1: 29.62,
      0.05: 32.67,
      0.025: 35.48,
      0.01: 38.93,
      0.005: 41.4
    },
    22: {
      0.995: 8.64,
      0.99: 9.54,
      0.975: 10.98,
      0.95: 12.34,
      0.9: 14.04,
      0.5: 21.34,
      0.1: 30.81,
      0.05: 33.92,
      0.025: 36.78,
      0.01: 40.29,
      0.005: 42.8
    },
    23: {
      0.995: 9.26,
      0.99: 10.2,
      0.975: 11.69,
      0.95: 13.09,
      0.9: 14.85,
      0.5: 22.34,
      0.1: 32.01,
      0.05: 35.17,
      0.025: 38.08,
      0.01: 41.64,
      0.005: 44.18
    },
    24: {
      0.995: 9.89,
      0.99: 10.86,
      0.975: 12.4,
      0.95: 13.85,
      0.9: 15.66,
      0.5: 23.34,
      0.1: 33.2,
      0.05: 36.42,
      0.025: 39.36,
      0.01: 42.98,
      0.005: 45.56
    },
    25: {
      0.995: 10.52,
      0.99: 11.52,
      0.975: 13.12,
      0.95: 14.61,
      0.9: 16.47,
      0.5: 24.34,
      0.1: 34.28,
      0.05: 37.65,
      0.025: 40.65,
      0.01: 44.31,
      0.005: 46.93
    },
    26: {
      0.995: 11.16,
      0.99: 12.2,
      0.975: 13.84,
      0.95: 15.38,
      0.9: 17.29,
      0.5: 25.34,
      0.1: 35.56,
      0.05: 38.89,
      0.025: 41.92,
      0.01: 45.64,
      0.005: 48.29
    },
    27: {
      0.995: 11.81,
      0.99: 12.88,
      0.975: 14.57,
      0.95: 16.15,
      0.9: 18.11,
      0.5: 26.34,
      0.1: 36.74,
      0.05: 40.11,
      0.025: 43.19,
      0.01: 46.96,
      0.005: 49.65
    },
    28: {
      0.995: 12.46,
      0.99: 13.57,
      0.975: 15.31,
      0.95: 16.93,
      0.9: 18.94,
      0.5: 27.34,
      0.1: 37.92,
      0.05: 41.34,
      0.025: 44.46,
      0.01: 48.28,
      0.005: 50.99
    },
    29: {
      0.995: 13.12,
      0.99: 14.26,
      0.975: 16.05,
      0.95: 17.71,
      0.9: 19.77,
      0.5: 28.34,
      0.1: 39.09,
      0.05: 42.56,
      0.025: 45.72,
      0.01: 49.59,
      0.005: 52.34
    },
    30: {
      0.995: 13.79,
      0.99: 14.95,
      0.975: 16.79,
      0.95: 18.49,
      0.9: 20.6,
      0.5: 29.34,
      0.1: 40.26,
      0.05: 43.77,
      0.025: 46.98,
      0.01: 50.89,
      0.005: 53.67
    },
    40: {
      0.995: 20.71,
      0.99: 22.16,
      0.975: 24.43,
      0.95: 26.51,
      0.9: 29.05,
      0.5: 39.34,
      0.1: 51.81,
      0.05: 55.76,
      0.025: 59.34,
      0.01: 63.69,
      0.005: 66.77
    },
    50: {
      0.995: 27.99,
      0.99: 29.71,
      0.975: 32.36,
      0.95: 34.76,
      0.9: 37.69,
      0.5: 49.33,
      0.1: 63.17,
      0.05: 67.5,
      0.025: 71.42,
      0.01: 76.15,
      0.005: 79.49
    },
    60: {
      0.995: 35.53,
      0.99: 37.48,
      0.975: 40.48,
      0.95: 43.19,
      0.9: 46.46,
      0.5: 59.33,
      0.1: 74.4,
      0.05: 79.08,
      0.025: 83.3,
      0.01: 88.38,
      0.005: 91.95
    },
    70: {
      0.995: 43.28,
      0.99: 45.44,
      0.975: 48.76,
      0.95: 51.74,
      0.9: 55.33,
      0.5: 69.33,
      0.1: 85.53,
      0.05: 90.53,
      0.025: 95.02,
      0.01: 100.42,
      0.005: 104.22
    },
    80: {
      0.995: 51.17,
      0.99: 53.54,
      0.975: 57.15,
      0.95: 60.39,
      0.9: 64.28,
      0.5: 79.33,
      0.1: 96.58,
      0.05: 101.88,
      0.025: 106.63,
      0.01: 112.33,
      0.005: 116.32
    },
    90: {
      0.995: 59.2,
      0.99: 61.75,
      0.975: 65.65,
      0.95: 69.13,
      0.9: 73.29,
      0.5: 89.33,
      0.1: 107.57,
      0.05: 113.14,
      0.025: 118.14,
      0.01: 124.12,
      0.005: 128.3
    },
    100: {
      0.995: 67.33,
      0.99: 70.06,
      0.975: 74.22,
      0.95: 77.93,
      0.9: 82.36,
      0.5: 99.33,
      0.1: 118.5,
      0.05: 124.34,
      0.025: 129.56,
      0.01: 135.81,
      0.005: 140.17
    }
  };
  var K = Math.sqrt(2 * Math.PI),
    U = {
      gaussian: function(t) {
        return Math.exp(-0.5 * t * t) / K;
      }
    },
    j = {
      nrd: function(t) {
        var r = D(t),
          n = m(t);
        return (
          "number" == typeof n && (r = Math.min(r, n / 1.34)),
          1.06 * r * Math.pow(t.length, -0.2)
        );
      }
    };
  function G(t, r, n) {
    var e, a;
    if (void 0 === r) e = U.gaussian;
    else if ("string" == typeof r) {
      if (!U[r]) throw new Error('Unknown kernel "' + r + '"');
      e = U[r];
    } else e = r;
    if (void 0 === n) a = j.nrd(t);
    else if ("string" == typeof n) {
      if (!j[n]) throw new Error('Unknown bandwidth method "' + n + '"');
      a = j[n](t);
    } else a = n;
    return function(r) {
      var n = 0,
        o = 0;
      for (n = 0; n < t.length; n++) o += e((r - t[n]) / a);
      return o / a / t.length;
    };
  }
  var H = Math.sqrt(2 * Math.PI);
  function L(t) {
    for (var r = t, n = t, e = 1; e < 15; e++) r += n *= (t * t) / (2 * e + 1);
    return Math.round(1e4 * (0.5 + (r / H) * Math.exp((-t * t) / 2))) / 1e4;
  }
  for (var O = [], W = 0; W <= 3.09; W += 0.01) O.push(L(W));
  function J(t) {
    var r = 1 / (1 + 0.5 * Math.abs(t)),
      n =
        r *
        Math.exp(
          -t * t +
            ((((((((0.17087277 * r - 0.82215223) * r + 1.48851587) * r -
              1.13520398) *
              r +
              0.27886807) *
              r -
              0.18628806) *
              r +
              0.09678418) *
              r +
              0.37409196) *
              r +
              1.00002368) *
              r -
            1.26551223
        );
    return t >= 0 ? 1 - n : n - 1;
  }
  function Q(t) {
    var r = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI)),
      n = Math.sqrt(
        Math.sqrt(
          Math.pow(2 / (Math.PI * r) + Math.log(1 - t * t) / 2, 2) -
            Math.log(1 - t * t) / r
        ) -
          (2 / (Math.PI * r) + Math.log(1 - t * t) / 2)
      );
    return t >= 0 ? n : -n;
  }
  function X(t) {
    if ("number" == typeof t) return t < 0 ? -1 : 0 === t ? 0 : 1;
    throw new TypeError("not a number");
  }
  (t.linearRegression = function(t) {
    var r,
      n,
      e = t.length;
    if (1 === e) (r = 0), (n = t[0][1]);
    else {
      for (var a, o, i, u = 0, h = 0, f = 0, s = 0, l = 0; l < e; l++)
        (u += o = (a = t[l])[0]), (h += i = a[1]), (f += o * o), (s += o * i);
      n = h / e - ((r = (e * s - u * h) / (e * f - u * u)) * u) / e;
    }
    return { m: r, b: n };
  }),
    (t.linearRegressionLine = function(t) {
      return function(r) {
        return t.b + t.m * r;
      };
    }),
    (t.standardDeviation = o),
    (t.rSquared = function(t, r) {
      if (t.length < 2) return 1;
      for (var n = 0, e = 0; e < t.length; e++) n += t[e][1];
      for (var a = n / t.length, o = 0, i = 0; i < t.length; i++)
        o += Math.pow(a - t[i][1], 2);
      for (var u = 0, h = 0; h < t.length; h++)
        u += Math.pow(t[h][1] - r(t[h][0]), 2);
      return 1 - u / o;
    }),
    (t.mode = function(t) {
      return i(u(t));
    }),
    (t.modeFast = function(t) {
      for (var r, n = new Map(), e = 0, a = 0; a < t.length; a++) {
        var o = n.get(t[a]);
        void 0 === o ? (o = 1) : o++,
          o > e && ((r = t[a]), (e = o)),
          n.set(t[a], o);
      }
      if (0 === e) throw new Error("mode requires at last one data point");
      return r;
    }),
    (t.modeSorted = i),
    (t.min = h),
    (t.max = f),
    (t.extent = function(t) {
      if (0 === t.length)
        throw new Error("extent requires at least one data point");
      for (var r = t[0], n = t[0], e = 1; e < t.length; e++)
        t[e] > n && (n = t[e]), t[e] < r && (r = t[e]);
      return [r, n];
    }),
    (t.minSorted = function(t) {
      return t[0];
    }),
    (t.maxSorted = function(t) {
      return t[t.length - 1];
    }),
    (t.extentSorted = function(t) {
      return [t[0], t[t.length - 1]];
    }),
    (t.sum = r),
    (t.sumSimple = function(t) {
      for (var r = 0, n = 0; n < t.length; n++) r += t[n];
      return r;
    }),
    (t.product = function(t) {
      for (var r = 1, n = 0; n < t.length; n++) r *= t[n];
      return r;
    }),
    (t.quantile = g),
    (t.quantileSorted = s),
    (t.quantileRank = function(t, r) {
      return M(u(t), r);
    }),
    (t.quantileRankSorted = M),
    (t.interquartileRange = m),
    (t.iqr = m),
    (t.medianAbsoluteDeviation = b),
    (t.mad = b),
    (t.chunk = function(t, r) {
      var n = [];
      if (r < 1) throw new Error("chunk size must be a positive number");
      if (Math.floor(r) !== r) throw new Error("chunk size must be an integer");
      for (var e = 0; e < t.length; e += r) n.push(t.slice(e, e + r));
      return n;
    }),
    (t.sampleWithReplacement = function(t, r, n) {
      if (0 === t.length) return [];
      n = n || Math.random;
      for (var e = t.length, a = [], o = 0; o < r; o++) {
        var i = Math.floor(n() * e);
        a.push(t[i]);
      }
      return a;
    }),
    (t.shuffle = E),
    (t.shuffleInPlace = q),
    (t.sample = function(t, r, n) {
      return E(t, n).slice(0, r);
    }),
    (t.ckmeans = function(t, r) {
      if (r > t.length)
        throw new Error(
          "cannot generate more classes than there are data values"
        );
      var n = u(t);
      if (1 === y(n)) return [n];
      var e = S(r, n.length),
        a = S(r, n.length);
      !(function(t, r, n) {
        for (
          var e = r[0].length,
            a = t[Math.floor(e / 2)],
            o = [],
            i = [],
            u = 0,
            h = void 0;
          u < e;
          ++u
        )
          (h = t[u] - a),
            0 === u
              ? (o.push(h), i.push(h * h))
              : (o.push(o[u - 1] + h), i.push(i[u - 1] + h * h)),
            (r[0][u] = x(0, u, o, i)),
            (n[0][u] = 0);
        for (var f = 1; f < r.length; ++f)
          k(f < r.length - 1 ? f : e - 1, e - 1, f, r, n, o, i);
      })(n, e, a);
      for (var o = [], i = a[0].length - 1, h = a.length - 1; h >= 0; h--) {
        var f = a[h][i];
        (o[h] = n.slice(f, i + 1)), h > 0 && (i = f - 1);
      }
      return o;
    }),
    (t.uniqueCountSorted = y),
    (t.sumNthPowerDeviations = e),
    (t.equalIntervalBreaks = function(t, r) {
      if (t.length < 2) return t;
      for (var n = h(t), e = f(t), a = [n], o = (e - n) / r, i = 1; i < r; i++)
        a.push(a[0] + o * i);
      return a.push(e), a;
    }),
    (t.sampleCovariance = I),
    (t.sampleCorrelation = function(t, r) {
      return I(t, r) / D(t) / D(r);
    }),
    (t.sampleVariance = P),
    (t.sampleStandardDeviation = D),
    (t.sampleSkewness = function(t) {
      if (t.length < 3)
        throw new Error("sampleSkewness requires at least three data points");
      for (var r, e = n(t), a = 0, o = 0, i = 0; i < t.length; i++)
        (a += (r = t[i] - e) * r), (o += r * r * r);
      var u = Math.sqrt(a / (t.length - 1)),
        h = t.length;
      return (h * o) / ((h - 1) * (h - 2) * Math.pow(u, 3));
    }),
    (t.sampleKurtosis = function(t) {
      var r = t.length;
      if (r < 4)
        throw new Error("sampleKurtosis requires at least four data points");
      for (var e, a = n(t), o = 0, i = 0, u = 0; u < r; u++)
        (o += (e = t[u] - a) * e), (i += e * e * e * e);
      return (
        ((r - 1) / ((r - 2) * (r - 3))) *
        ((r * (r + 1) * i) / (o * o) - 3 * (r - 1))
      );
    }),
    (t.permutationsHeap = function(t) {
      for (
        var r = new Array(t.length), n = [t.slice()], e = 0;
        e < t.length;
        e++
      )
        r[e] = 0;
      for (var a = 0; a < t.length; )
        if (r[a] < a) {
          var o = 0;
          a % 2 != 0 && (o = r[a]);
          var i = t[o];
          (t[o] = t[a]), (t[a] = i), n.push(t.slice()), r[a]++, (a = 0);
        } else (r[a] = 0), a++;
      return n;
    }),
    (t.combinations = function t(r, n) {
      var e,
        a,
        o,
        i,
        u = [];
      for (e = 0; e < r.length; e++)
        if (1 === n) u.push([r[e]]);
        else
          for (o = t(r.slice(e + 1, r.length), n - 1), a = 0; a < o.length; a++)
            (i = o[a]).unshift(r[e]), u.push(i);
      return u;
    }),
    (t.combinationsReplacement = function t(r, n) {
      for (var e = [], a = 0; a < r.length; a++)
        if (1 === n) e.push([r[a]]);
        else
          for (var o = t(r.slice(a, r.length), n - 1), i = 0; i < o.length; i++)
            e.push([r[a]].concat(o[i]));
      return e;
    }),
    (t.addToMean = function(t, r, n) {
      return t + (n - t) / (r + 1);
    }),
    (t.combineMeans = C),
    (t.combineVariances = function(t, r, n, e, a, o) {
      var i = C(r, n, a, o);
      return (
        (n * (t + Math.pow(r - i, 2)) + o * (e + Math.pow(a - i, 2))) / (n + o)
      );
    }),
    (t.geometricMean = function(t) {
      if (0 === t.length)
        throw new Error("geometricMean requires at least one data point");
      for (var r = 1, n = 0; n < t.length; n++) {
        if (t[n] <= 0)
          throw new Error(
            "geometricMean requires only positive numbers as input"
          );
        r *= t[n];
      }
      return Math.pow(r, 1 / t.length);
    }),
    (t.harmonicMean = function(t) {
      if (0 === t.length)
        throw new Error("harmonicMean requires at least one data point");
      for (var r = 0, n = 0; n < t.length; n++) {
        if (t[n] <= 0)
          throw new Error(
            "harmonicMean requires only positive numbers as input"
          );
        r += 1 / t[n];
      }
      return t.length / r;
    }),
    (t.average = n),
    (t.mean = n),
    (t.median = d),
    (t.medianSorted = function(t) {
      return s(t, 0.5);
    }),
    (t.subtractFromMean = function(t, r, n) {
      return (t * r - n) / (r - 1);
    }),
    (t.rootMeanSquare = T),
    (t.rms = T),
    (t.variance = a),
    (t.tTest = function(t, r) {
      return (n(t) - r) / (o(t) / Math.sqrt(t.length));
    }),
    (t.tTestTwoSample = function(t, r, e) {
      var a = t.length,
        o = r.length;
      if (!a || !o) return null;
      e || (e = 0);
      var i = n(t),
        u = n(r),
        h = P(t),
        f = P(r);
      return "number" == typeof i &&
        "number" == typeof u &&
        "number" == typeof h &&
        "number" == typeof f
        ? (i - u - e) /
            Math.sqrt(
              (((a - 1) * h + (o - 1) * f) / (a + o - 2)) * (1 / a + 1 / o)
            )
        : void 0;
    }),
    (t.BayesianClassifier = N),
    (t.bayesian = N),
    (t.PerceptronModel = R),
    (t.perceptron = R),
    (t.epsilon = F),
    (t.factorial = A),
    (t.gamma = function t(r) {
      if (Number.isInteger(r)) return r <= 0 ? NaN : A(r - 1);
      if (--r < 0) return Math.PI / (Math.sin(Math.PI * -r) * t(-r));
      var n = r + 0.25;
      return (
        Math.pow(r / Math.E, r) *
        Math.sqrt(2 * Math.PI * (r + 1 / 6)) *
        (1 +
          1 / 144 / Math.pow(n, 2) -
          1 / 12960 / Math.pow(n, 3) -
          257 / 207360 / Math.pow(n, 4) -
          52 / 2612736 / Math.pow(n, 5) +
          5741173 / 9405849600 / Math.pow(n, 6) +
          37529 / 18811699200 / Math.pow(n, 7))
      );
    }),
    (t.gammaln = function(t) {
      if (t <= 0) return Infinity;
      t--;
      for (var r = _[0], n = 1; n < 15; n++) r += _[n] / (t + n);
      var e = z + 0.5 + t;
      return V + Math.log(r) - e + (t + 0.5) * Math.log(e);
    }),
    (t.bernoulliDistribution = function(t) {
      if (t < 0 || t > 1)
        throw new Error(
          "bernoulliDistribution requires probability to be between 0 and 1 inclusive"
        );
      return [1 - t, t];
    }),
    (t.binomialDistribution = function(t, r) {
      if (!(r < 0 || r > 1 || t <= 0 || t % 1 != 0)) {
        var n = 0,
          e = 0,
          a = [],
          o = 1;
        do {
          (a[n] = o * Math.pow(r, n) * Math.pow(1 - r, t - n)),
            (e += a[n]),
            (o = (o * (t - ++n + 1)) / n);
        } while (e < 1 - F);
        return a;
      }
    }),
    (t.poissonDistribution = function(t) {
      if (!(t <= 0)) {
        var r = 0,
          n = 0,
          e = [],
          a = 1;
        do {
          (e[r] = (Math.exp(-t) * Math.pow(t, r)) / a), (n += e[r]), (a *= ++r);
        } while (n < 1 - F);
        return e;
      }
    }),
    (t.chiSquaredDistributionTable = B),
    (t.chiSquaredGoodnessOfFit = function(t, r, e) {
      for (var a = 0, o = r(n(t)), i = [], u = [], h = 0; h < t.length; h++)
        void 0 === i[t[h]] && (i[t[h]] = 0), i[t[h]]++;
      for (var f = 0; f < i.length; f++) void 0 === i[f] && (i[f] = 0);
      for (var s in o) s in i && (u[+s] = o[s] * t.length);
      for (var l = u.length - 1; l >= 0; l--)
        u[l] < 3 && ((u[l - 1] += u[l]), u.pop(), (i[l - 1] += i[l]), i.pop());
      for (var c = 0; c < i.length; c++) a += Math.pow(i[c] - u[c], 2) / u[c];
      return B[i.length - 1 - 1][e] < a;
    }),
    (t.kernelDensityEstimation = G),
    (t.kde = G),
    (t.zScore = function(t, r, n) {
      return (t - r) / n;
    }),
    (t.cumulativeStdNormalProbability = function(t) {
      var r = Math.abs(t),
        n = Math.min(Math.round(100 * r), O.length - 1);
      return t >= 0 ? O[n] : +(1 - O[n]).toFixed(4);
    }),
    (t.standardNormalTable = O),
    (t.errorFunction = J),
    (t.erf = J),
    (t.inverseErrorFunction = Q),
    (t.probit = function(t) {
      return (
        0 === t ? (t = F) : t >= 1 && (t = 1 - F), Math.sqrt(2) * Q(2 * t - 1)
      );
    }),
    (t.permutationTest = function(t, r, e, a) {
      if (
        (void 0 === a && (a = 1e4),
        void 0 === e && (e = "two_side"),
        "two_side" !== e && "greater" !== e && "less" !== e)
      )
        throw new Error(
          "`alternative` must be either 'two_side', 'greater', or 'less'"
        );
      for (
        var o = n(t) - n(r),
          i = new Array(a),
          u = t.concat(r),
          h = Math.floor(u.length / 2),
          f = 0;
        f < a;
        f++
      ) {
        q(u);
        var s = u.slice(0, h),
          l = u.slice(h, u.length),
          c = n(s) - n(l);
        i[f] = c;
      }
      var g = 0;
      if ("two_side" === e)
        for (var v = 0; v <= a; v++) Math.abs(i[v]) >= Math.abs(o) && (g += 1);
      else if ("greater" === e)
        for (var p = 0; p <= a; p++) i[p] >= o && (g += 1);
      else for (var w = 0; w <= a; w++) i[w] <= o && (g += 1);
      return g / a;
    }),
    (t.bisect = function(t, r, n, e, a) {
      if ("function" != typeof t)
        throw new TypeError("func must be a function");
      for (var o = 0; o < e; o++) {
        var i = (r + n) / 2;
        if (0 === t(i) || Math.abs((n - r) / 2) < a) return i;
        X(t(i)) === X(t(r)) ? (r = i) : (n = i);
      }
      throw new Error("maximum number of iterations exceeded");
    }),
    (t.quickselect = l),
    (t.sign = X),
    (t.numericSort = u);
});
//# sourceMappingURL=simple-statistics.min.js.map
